// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace ServoSharp
{
    /// <summary>Generic result errors</summary>
    public enum ServoResult
    {
        ServoResultOk = 0,
        ServoResultUnexpectedError = 1,
        ServoResultWrongThread = 2,
        ServoResultCantReadStr = 3,
        ServoResultCantParseUrl = 4
    }

    /// <summary>Scroll state</summary>
    public enum ScrollState
    {
        ScrollStateStart = 0,
        ScrollStateMove = 1,
        ScrollStateEnd = 2,
        ScrollStateCanceled = 3
    }

    /// <summary>Callback used by Servo internals</summary>
    public unsafe partial class HostCallbacks : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr wakeup;

            [FieldOffset(8)]
            internal global::System.IntPtr flush;

            [FieldOffset(16)]
            internal global::System.IntPtr log;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.HostCallbacks> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.HostCallbacks>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::ServoSharp.HostCallbacks __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::ServoSharp.HostCallbacks(native.ToPointer(), skipVTables);
        }

        internal static global::ServoSharp.HostCallbacks __CreateInstance(global::ServoSharp.HostCallbacks.__Internal native, bool skipVTables = false)
        {
            return new global::ServoSharp.HostCallbacks(native, skipVTables);
        }

        private static void* __CopyValue(global::ServoSharp.HostCallbacks.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::ServoSharp.HostCallbacks.__Internal));
            *(global::ServoSharp.HostCallbacks.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HostCallbacks(global::ServoSharp.HostCallbacks.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HostCallbacks(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::ServoSharp.HostCallbacks __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class Size : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint width;

            [FieldOffset(4)]
            internal uint height;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.Size> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.Size>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::ServoSharp.Size __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::ServoSharp.Size(native.ToPointer(), skipVTables);
        }

        internal static global::ServoSharp.Size __CreateInstance(global::ServoSharp.Size.__Internal native, bool skipVTables = false)
        {
            return new global::ServoSharp.Size(native, skipVTables);
        }

        private static void* __CopyValue(global::ServoSharp.Size.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::ServoSharp.Size.__Internal));
            *(global::ServoSharp.Size.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Size(global::ServoSharp.Size.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Size(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::ServoSharp.Size __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((global::ServoSharp.Size.__Internal*) __Instance)->width;
            }

            set
            {
                ((global::ServoSharp.Size.__Internal*) __Instance)->width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((global::ServoSharp.Size.__Internal*) __Instance)->height;
            }

            set
            {
                ((global::ServoSharp.Size.__Internal*) __Instance)->height = value;
            }
        }
    }

    public unsafe partial class Margins : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint top;

            [FieldOffset(4)]
            internal uint right;

            [FieldOffset(8)]
            internal uint bottom;

            [FieldOffset(12)]
            internal uint left;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.Margins> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.Margins>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::ServoSharp.Margins __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::ServoSharp.Margins(native.ToPointer(), skipVTables);
        }

        internal static global::ServoSharp.Margins __CreateInstance(global::ServoSharp.Margins.__Internal native, bool skipVTables = false)
        {
            return new global::ServoSharp.Margins(native, skipVTables);
        }

        private static void* __CopyValue(global::ServoSharp.Margins.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::ServoSharp.Margins.__Internal));
            *(global::ServoSharp.Margins.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Margins(global::ServoSharp.Margins.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Margins(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::ServoSharp.Margins __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Top
        {
            get
            {
                return ((global::ServoSharp.Margins.__Internal*) __Instance)->top;
            }

            set
            {
                ((global::ServoSharp.Margins.__Internal*) __Instance)->top = value;
            }
        }

        public uint Right
        {
            get
            {
                return ((global::ServoSharp.Margins.__Internal*) __Instance)->right;
            }

            set
            {
                ((global::ServoSharp.Margins.__Internal*) __Instance)->right = value;
            }
        }

        public uint Bottom
        {
            get
            {
                return ((global::ServoSharp.Margins.__Internal*) __Instance)->bottom;
            }

            set
            {
                ((global::ServoSharp.Margins.__Internal*) __Instance)->bottom = value;
            }
        }

        public uint Left
        {
            get
            {
                return ((global::ServoSharp.Margins.__Internal*) __Instance)->left;
            }

            set
            {
                ((global::ServoSharp.Margins.__Internal*) __Instance)->left = value;
            }
        }
    }

    public unsafe partial class Position : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int x;

            [FieldOffset(4)]
            internal int y;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.Position> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.Position>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::ServoSharp.Position __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::ServoSharp.Position(native.ToPointer(), skipVTables);
        }

        internal static global::ServoSharp.Position __CreateInstance(global::ServoSharp.Position.__Internal native, bool skipVTables = false)
        {
            return new global::ServoSharp.Position(native, skipVTables);
        }

        private static void* __CopyValue(global::ServoSharp.Position.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::ServoSharp.Position.__Internal));
            *(global::ServoSharp.Position.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Position(global::ServoSharp.Position.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Position(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::ServoSharp.Position __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int X
        {
            get
            {
                return ((global::ServoSharp.Position.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::ServoSharp.Position.__Internal*) __Instance)->x = value;
            }
        }

        public int Y
        {
            get
            {
                return ((global::ServoSharp.Position.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::ServoSharp.Position.__Internal*) __Instance)->y = value;
            }
        }
    }

    public unsafe partial class ViewLayout : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::ServoSharp.Size.__Internal view_size;

            [FieldOffset(8)]
            internal global::ServoSharp.Margins.__Internal margins;

            [FieldOffset(24)]
            internal global::ServoSharp.Position.__Internal position;

            [FieldOffset(32)]
            internal float hidpi_factor;
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.ViewLayout> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::ServoSharp.ViewLayout>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::ServoSharp.ViewLayout __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::ServoSharp.ViewLayout(native.ToPointer(), skipVTables);
        }

        internal static global::ServoSharp.ViewLayout __CreateInstance(global::ServoSharp.ViewLayout.__Internal native, bool skipVTables = false)
        {
            return new global::ServoSharp.ViewLayout(native, skipVTables);
        }

        private static void* __CopyValue(global::ServoSharp.ViewLayout.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::ServoSharp.ViewLayout.__Internal));
            *(global::ServoSharp.ViewLayout.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ViewLayout(global::ServoSharp.ViewLayout.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ViewLayout(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::ServoSharp.ViewLayout __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::ServoSharp.Size ViewSize
        {
            get
            {
                return global::ServoSharp.Size.__CreateInstance(((global::ServoSharp.ViewLayout.__Internal*) __Instance)->view_size);
            }

            set
            {
                ((global::ServoSharp.ViewLayout.__Internal*) __Instance)->view_size = ReferenceEquals(value, null) ? new global::ServoSharp.Size.__Internal() : *(global::ServoSharp.Size.__Internal*) value.__Instance;
            }
        }

        public global::ServoSharp.Margins Margins
        {
            get
            {
                return global::ServoSharp.Margins.__CreateInstance(((global::ServoSharp.ViewLayout.__Internal*) __Instance)->margins);
            }

            set
            {
                ((global::ServoSharp.ViewLayout.__Internal*) __Instance)->margins = ReferenceEquals(value, null) ? new global::ServoSharp.Margins.__Internal() : *(global::ServoSharp.Margins.__Internal*) value.__Instance;
            }
        }

        public global::ServoSharp.Position Position
        {
            get
            {
                return global::ServoSharp.Position.__CreateInstance(((global::ServoSharp.ViewLayout.__Internal*) __Instance)->position);
            }

            set
            {
                ((global::ServoSharp.ViewLayout.__Internal*) __Instance)->position = ReferenceEquals(value, null) ? new global::ServoSharp.Position.__Internal() : *(global::ServoSharp.Position.__Internal*) value.__Instance;
            }
        }

        public float HidpiFactor
        {
            get
            {
                return ((global::ServoSharp.ViewLayout.__Internal*) __Instance)->hidpi_factor;
            }

            set
            {
                ((global::ServoSharp.ViewLayout.__Internal*) __Instance)->hidpi_factor = value;
            }
        }
    }

    public unsafe partial class libservobridge
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("libservobridge.so", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="servo_version")]
            internal static extern byte* ServoVersion();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libservobridge.so", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="init_with_egl")]
            internal static extern global::ServoSharp.ServoResult InitWithEgl(global::ServoSharp.HostCallbacks.__Internal callbacks, global::ServoSharp.ViewLayout.__Internal layout);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libservobridge.so", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="perform_updates")]
            internal static extern global::ServoSharp.ServoResult PerformUpdates();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libservobridge.so", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="load_url")]
            internal static extern global::ServoSharp.ServoResult LoadUrl(byte* url);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("libservobridge.so", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="scroll")]
            internal static extern global::ServoSharp.ServoResult Scroll(int dx, int dy, uint x, uint y, global::ServoSharp.ScrollState state);
        }

        public static byte* ServoVersion()
        {
            var __ret = __Internal.ServoVersion();
            return __ret;
        }

        /// <summary>Needs to be called from the EGL thread</summary>
        public static global::ServoSharp.ServoResult InitWithEgl(global::ServoSharp.HostCallbacks callbacks, global::ServoSharp.ViewLayout layout)
        {
            var __arg0 = ReferenceEquals(callbacks, null) ? new global::ServoSharp.HostCallbacks.__Internal() : *(global::ServoSharp.HostCallbacks.__Internal*) callbacks.__Instance;
            var __arg1 = ReferenceEquals(layout, null) ? new global::ServoSharp.ViewLayout.__Internal() : *(global::ServoSharp.ViewLayout.__Internal*) layout.__Instance;
            var __ret = __Internal.InitWithEgl(__arg0, __arg1);
            return __ret;
        }

        /// <summary>
        /// <para>This is the Servo heartbeat. This needs to be called</para>
        /// <para>everytime wakeup is called.</para>
        /// </summary>
        public static global::ServoSharp.ServoResult PerformUpdates()
        {
            var __ret = __Internal.PerformUpdates();
            return __ret;
        }

        /// <summary>Load an URL. This needs to be a valid url.</summary>
        public static global::ServoSharp.ServoResult LoadUrl(byte* url)
        {
            var __ret = __Internal.LoadUrl(url);
            return __ret;
        }

        public static global::ServoSharp.ServoResult Scroll(int dx, int dy, uint x, uint y, global::ServoSharp.ScrollState state)
        {
            var __ret = __Internal.Scroll(dx, dy, x, y, state);
            return __ret;
        }
    }
}
